{"version":3,"sources":["components/TitleComponent.js","components/Header.js","components/TodoList.js","components/SearchBar.js","components/Sort.js","components/Home.js","components/Folders.js","components/Settings.js","components/AddTodo.js","components/LeftNav.js","components/Layout.js","components/TaskViewEdit.js","components/TaskViewShow.js","components/TaskView.js","App.js","index.js"],"names":["TitleComponent","url","useLocation","pathname","getTitle","Header","className","TodoList","selectedFolder","todos","handleDelete","folders","postTaskHandler","setSelectedTask","history","useHistory","sqlDateToDateString","d","temp","Date","getDate","slice","getMonth","renderTitle","todo","isDone","title","renderDeadLine","deadline","renderDeleteButton","Icon","onClick","id","renderIsDone","Checkbox","checked","Boolean","onChange","e","task","editedTask","handleChange","inputProps","map","folder_id","undefined","push","wrapperFunction","printTodos","SearchBar","searchData","useState","currInput","setCurrInput","displayError","useRef","preventDefault","target","value","length","console","log","current","handleSubmit","type","placeholder","Sort","sortAscending","sortTodosHandler","setSortAscending","currSort","printPrettierSelectedSort","Home","selectFolder","Folders","handleFolderDelete","postFolderHandler","setSelectedFolder","dropdownRef","folderListActive","setFolderListActive","closeFolderList","folderCurrInput","setFolderCurrInput","isActive","setIsActive","useEffect","handleClick","contains","document","addEventListener","removeEventListener","submitFolder","name","ref","folder","Settings","deleteAllTasks","deleteAllFolders","AddTodo","setTodos","navSize","dCurrInput","setDCurrInput","taskFolderId","setTaskFolderId","folderNamePrint","setFolderNamePrint","calendarActive","setCalendarActive","closeFolder","calendarRef","setDisplayError","errMsg","setErrMsg","tzoffset","v","offSet","getTimezoneOffset","setHours","toISOString","split","newTodo","description","onSubmit","isNaN","addFolderWrapper","toDateString","locale","LeftNav","handleNavSizeChange","closeNav","style","width","exact","to","activeClassName","Layout","props","children","TaskViewEdit","selectedTask","toggleMode","redirect","calendarValue","setCalendarValue","item","indexOf","TaskViewShow","TaskView","editMode","setEditMode","App","setCurrSort","setFolders","fetchData","str","sortTodos","tasks","table","arr","sortFunc","a","b","sort","search","fetchTable","query","axios","get","response","data","Promise","all","then","catch","post","delete","res","status","setNavSize","smallScreen","useMediaQuery","CloseNav","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7c6cfe2e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TitleComponent = () => {\r\n  const url = useLocation();\r\n\r\n  const getTitle = () => {\r\n    switch (url.pathname) {\r\n      case \"/\":\r\n        return \"Tasks\";\r\n      case \"/folders\":\r\n        return \"Folders\";\r\n      case \"/settings\":\r\n        return \"Settings\";\r\n      case \"/add\":\r\n        return \"New task\";\r\n      case \"/task\":\r\n        return \"Task\";\r\n      default:\r\n        return \"Something went wrong :>\";\r\n    }\r\n  };\r\n\r\n  return <h1>{getTitle()}</h1>;\r\n};\r\n\r\nexport default TitleComponent;\r\n","import React from \"react\";\r\nimport TitleComponent from \"./TitleComponent\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <TitleComponent />\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Checkbox, Icon } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TodoList = ({\r\n  selectedFolder,\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n}) => {\r\n  // numbers represents indexes of todo tasks\r\n  let history = useHistory();\r\n  let wrapperFunction = (todo) => {\r\n    setSelectedTask(todo);\r\n    history.push(\"/task\");\r\n  };\r\n  // pass value here to print spesific folder only\r\n  const checkIfPrint = (id) => {\r\n    return selectedFolder === null || selectedFolder === undefined\r\n      ? true\r\n      : selectedFolder.id === id\r\n      ? true\r\n      : false;\r\n  };\r\n  const handleChange = (task) => {\r\n    // post check\r\n    const editedTask = { ...task };\r\n    editedTask.isDone = !editedTask.isDone;\r\n    postTaskHandler(editedTask);\r\n\r\n    //setChecked(event.target.checked);\r\n  };\r\n\r\n  // Function to convert the sql-date to preferred string with prefixed zeros\r\n  let sqlDateToDateString = (d) => {\r\n    if (d !== null) {\r\n      let temp = new Date(d);\r\n      let dateFormat = `${(\"0\" + temp.getDate()).slice(-2)}.${(\r\n        \"0\" +\r\n        (temp.getMonth() + 1)\r\n      ).slice(-2)}.`;\r\n      return dateFormat;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const printTodos = () => {\r\n    const renderTitle = (todo) => {\r\n      return (\r\n        <div className={todo.isDone ? \"task-done\" : \"task\"}>{todo.title}</div>\r\n      );\r\n    };\r\n    const renderDescription = (todo) => {\r\n      return <>{todo.description} </>;\r\n    };\r\n    const renderDeadLine = (todo) => {\r\n      return (\r\n        <div className=\"dead-line\"> {sqlDateToDateString(todo.deadline)} </div>\r\n      );\r\n    };\r\n\r\n    const renderFolder = (id) => {\r\n      if (folders.length === 0 || id === null) return null;\r\n      return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n    };\r\n    const renderDeleteButton = (todo) => {\r\n      return (\r\n        <>\r\n          <Icon className=\"fa fa-trash\" onClick={() => handleDelete(todo.id)} />\r\n        </>\r\n      );\r\n    };\r\n    const renderIsDone = (todo) => {\r\n      return (\r\n        <Checkbox\r\n          className=\"check-box\"\r\n          checked={Boolean(todo.isDone)}\r\n          onChange={(e) => handleChange(todo)}\r\n          inputProps={{ \"aria-label\": \"checkbox with default color\" }}\r\n        />\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        {todos.map(\r\n          (todo) =>\r\n            checkIfPrint(todo.folder_id) && (\r\n              <>\r\n                <hr />\r\n                <div className=\"todo-item\" key={todo.id}>\r\n                  <div>{renderIsDone(todo)} </div>\r\n                  <div\r\n                    className=\"clickable-area\"\r\n                    onClick={() => wrapperFunction(todo)}\r\n                  >\r\n                    {renderTitle(todo)}\r\n                    {renderDeadLine(todo)}\r\n                  </div>\r\n                  <div>{renderDeleteButton(todo)}</div>\r\n                </div>\r\n              </>\r\n            )\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return <div className=\"todos\"> {printTodos()}</div>;\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useRef } from \"react\";\r\n\r\nconst SearchBar = ({ searchData }) => {\r\n  const [currInput, setCurrInput] = useState(\"\");\r\n  const displayError = useRef(false);\r\n\r\n  const renderSearchBar = () => {\r\n    const handleSubmit = (e) => {\r\n      // prevent reload?\r\n      e.preventDefault();\r\n      if (e.target.value.length > 0) {\r\n        if (e.target.value[0] === \" \") {\r\n          console.log(\"gei\");\r\n          displayError.current = true;\r\n        } else {\r\n          searchData(e.target.value);\r\n          if (displayError.current) displayError.current = false;\r\n        }\r\n        // setCurrInput(\"\");\r\n      } else {\r\n        // null means fetchAll\r\n        if (displayError.current) displayError.current = false;\r\n        searchData(null);\r\n      }\r\n    };\r\n    return (\r\n      <form onChange={(e) => handleSubmit(e)}>\r\n        <div className=\"search-button\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            value={currInput}\r\n            onChange={(e) => setCurrInput(e.target.value)}\r\n          />\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"search-bar\">\r\n      {renderSearchBar()}\r\n      {displayError.current && (\r\n        <p className=\"error-text\"> Leading spaces are not allowed! </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBar;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst Sort = ({\r\n  sortAscending,\r\n  sortTodosHandler,\r\n  setSortAscending,\r\n  currSort,\r\n}) => {\r\n  const printPrettierSelectedSort = (currSort) => {\r\n    switch (currSort) {\r\n      case \"title\":\r\n        return \"Title\";\r\n      case \"timeCreated\":\r\n        return \"Time created\";\r\n      case \"isDone\":\r\n        return \"Status\";\r\n      case \"deadline\":\r\n        return \"Deadline\";\r\n      default:\r\n        return \"Error!\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sort\">\r\n      Sort\r\n      <div className=\"dropdown\">\r\n        <button className=\"dropbtn\">\r\n          {printPrettierSelectedSort(currSort)}\r\n        </button>\r\n        <div className=\"dropdown-content\">\r\n          <button onClick={() => sortTodosHandler(\"title\")}>Title</button>\r\n          <button onClick={() => sortTodosHandler(\"timeCreated\")}>\r\n            Time created\r\n          </button>\r\n          <button onClick={() => sortTodosHandler(\"deadline\")}>Deadline</button>\r\n          <button onClick={() => sortTodosHandler(\"isDone\")}>Status</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"arrow\">\r\n        <Icon\r\n          className={sortAscending ? \"fa fa-arrow-up\" : \"fa fa-arrow-down\"}\r\n          onClick={() => {\r\n            setSortAscending(!sortAscending);\r\n            sortTodosHandler(currSort);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Sort from \"./Sort\";\r\n\r\nconst Home = ({\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n  sortTodosHandler,\r\n  searchData,\r\n  sortAscending,\r\n  setSortAscending,\r\n  currSort,\r\n}) => {\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"sort-and-search\">\r\n        <Sort\r\n          sortAscending={sortAscending}\r\n          sortTodosHandler={sortTodosHandler}\r\n          setSortAscending={setSortAscending}\r\n          currSort={currSort}\r\n        />\r\n        <SearchBar searchData={searchData} />\r\n      </div>\r\n\r\n      <TodoList\r\n        selectFolder={null}\r\n        todos={todos}\r\n        folders={folders}\r\n        handleDelete={handleDelete}\r\n        postTaskHandler={postTaskHandler}\r\n        setSelectedTask={setSelectedTask}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst Folders = ({\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n  sortTodosHandler,\r\n  handleFolderDelete,\r\n  postFolderHandler,\r\n}) => {\r\n  const [selectedFolder, setSelectedFolder] = useState(null);\r\n  //dropdown\r\n  const dropdownRef = useRef(null);\r\n  const [folderListActive, setFolderListActive] = useState(false);\r\n  // handle outside clicks\r\n  const closeFolderList = useRef();\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolderList.current.contains(e.target)) {\r\n        if (folderListActive) {\r\n          setFolderListActive(!folderListActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [folderListActive]);\r\n  const addFolderWrapper = (folder) => {\r\n    submitFolder();\r\n    setIsActive(!isActive);\r\n  };\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"dropdown-menu-container\" ref={closeFolderList}>\r\n        <div className=\"folders-folder-icon\">\r\n          <Icon\r\n            className=\"fa fa-folder-open\"\r\n            onClick={() => setFolderListActive(!folderListActive)}\r\n          />\r\n          {selectedFolder !== null\r\n            ? ` ${selectedFolder.name}`\r\n            : \" No folder selected\"}\r\n        </div>\r\n\r\n        <br />\r\n\r\n        <div className=\"folders\">\r\n          <nav\r\n            ref={dropdownRef}\r\n            className={`menu ${folderListActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <ul>\r\n              <li>\r\n                <p>Create Folder</p>\r\n                <div className=\"folder-title-and-icon\">\r\n                  <form>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Folder title\"\r\n                      value={folderCurrInput}\r\n                      onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                    ></input>\r\n                  </form>\r\n                  <Icon\r\n                    className=\"fa fa-plus-square\"\r\n                    onClick={() => addFolderWrapper()}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <div>\r\n                {folders.map((folder) => (\r\n                  <li key={folder.id}>\r\n                    <div className=\"folders-title-and-icon\">\r\n                      <button\r\n                        className=\"folders-btn\"\r\n                        onClick={() => setSelectedFolder(folder)}\r\n                      >\r\n                        {folder.name}\r\n                      </button>\r\n                      <div className=\"folders-trash\">\r\n                        <Icon\r\n                          className=\"fa fa-trash\"\r\n                          onClick={() => handleFolderDelete(folder.id)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </div>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n      <TodoList\r\n        selectedFolder={selectedFolder}\r\n        todos={todos}\r\n        folders={folders}\r\n        handleDelete={handleDelete}\r\n        postTaskHandler={postTaskHandler}\r\n        setSelectedTask={setSelectedTask}\r\n        sortTodosHandler={sortTodosHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Folders;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\n\r\nconst Settings = ({ deleteAllTasks, deleteAllFolders }) => {\r\n  const wrapper = () => {\r\n    deleteAllTasks();\r\n    deleteAllFolders();\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"settings\">\r\n        <button onClick={() => deleteAllTasks()}>Delete all tasks</button>\r\n\r\n        <button onClick={() => deleteAllFolders()}>Delete all folders</button>\r\n\r\n        <button onClick={() => wrapper()}>Full reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst AddTodo = ({\r\n  todos,\r\n  setTodos,\r\n  folders,\r\n  navSize,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n}) => {\r\n  // title\r\n  const [currInput, setCurrInput] = useState(\"\");\r\n  // description\r\n  const [dCurrInput, setDCurrInput] = useState(\"\");\r\n  // folder\r\n  const [taskFolderId, setTaskFolderId] = useState(null);\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n  // for showing currently selected folder\r\n  const [folderNamePrint, setFolderNamePrint] = useState(\"\");\r\n  // calendar\r\n  const [value, onChange] = useState(null);\r\n  // dropdown\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  //calendar dropdown\r\n  const [calendarActive, setCalendarActive] = useState(false);\r\n\r\n  // handle clicks when clicked outside select folder\r\n  const closeFolder = useRef(null);\r\n  const calendarRef = useRef(null);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const [displayError, setDisplayError] = useState(false);\r\n  const [errMsg, setErrMsg] = useState(\"Error!\");\r\n\r\n  const folderWrapper = () => {\r\n    if (calendarActive) {\r\n      setCalendarActive(!calendarActive);\r\n    }\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolder.current.contains(e.target)) {\r\n        if (isActive) {\r\n          setIsActive(!isActive);\r\n        }\r\n        if (calendarActive) {\r\n          setCalendarActive(!calendarActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [isActive, calendarActive]);\r\n\r\n  // wrapper function for closing dropdown\r\n  // creating a folder or selecting existing\r\n  const addFolderWrapper = (folder) => {\r\n    isNaN(folder.id) ? submitFolder() : setTaskFolderId(folder.id);\r\n    setFolderNamePrint(folder.name);\r\n    setIsActive(false);\r\n  };\r\n\r\n  // for redirecting\r\n  let history = useHistory();\r\n\r\n  // handle timezone offset for sql-date conversion\r\n  // takes Date.object as an argument\r\n  let tzoffset = (v) => {\r\n    let offSet = v.getTimezoneOffset() / 60;\r\n    if (offSet < 0) {\r\n      offSet = offSet - offSet * 2;\r\n    }\r\n    v.setHours(offSet);\r\n    v = v.toISOString().split(\"T\")[0];\r\n    return v;\r\n  };\r\n\r\n  // function to close dropdownmenu on outside-clicks\r\n\r\n  // here we could send task to sql server and then fetch tasks again\r\n  // currently recreating todos state\r\n  const handleSubmit = (e) => {\r\n    // prevent reload?\r\n    e.preventDefault();\r\n    if (currInput.length === 0) {\r\n      setErrMsg(\"Empty title not allowed\");\r\n      setDisplayError(true);\r\n    } else if (currInput[0] === \" \") {\r\n      setErrMsg(\"Leading whitespaces not allowed\");\r\n      setDisplayError(true);\r\n    } else {\r\n      // create new task and post it\r\n      const newTodo = {\r\n        title: currInput,\r\n        description: dCurrInput, // add logic here\r\n        deadline: value === null ? null : tzoffset(value),\r\n        folder_id: taskFolderId,\r\n      };\r\n      postTaskHandler(newTodo);\r\n\r\n      // set input to empty when submitting -is this needed? works without\r\n      setCurrInput(\"\");\r\n      //setDCurrInput(\"\");\r\n\r\n      // redirect to homepage after submit\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  // handles folder creation & post\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"add-todo\">\r\n        <Icon className=\"fa fa-check-circle\" onClick={handleSubmit} />\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Task title\"\r\n            value={currInput}\r\n            onChange={(e) => setCurrInput(e.target.value)}\r\n          />\r\n        </form>\r\n        {displayError && <p className=\"error-text\">{errMsg}</p>}\r\n        <form>\r\n          <div className=\"description-box\">\r\n            <textarea\r\n              type=\"text\"\r\n              placeholder=\"Task description (optional)\"\r\n              value={dCurrInput}\r\n              onChange={(e) => setDCurrInput(e.target.value)}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"dropdown-menu-container\" ref={closeFolder}>\r\n        <hr />\r\n        <div className=\"addtodo-folder-icon\">\r\n          <Icon className=\"fa fa-folder-open\" onClick={() => folderWrapper()} />\r\n          {folderNamePrint === \"\" ? \"No folder selected\" : folderNamePrint}\r\n        </div>\r\n        <div className=\"folders\">\r\n          <nav\r\n            ref={dropdownRef}\r\n            className={`menu ${isActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <ul>\r\n              <li>\r\n                <p>Create folder</p>{\" \"}\r\n                <div className=\"folder-title-and-icon\">\r\n                  <form onSubmit={handleSubmit}>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Folder title\"\r\n                      value={folderCurrInput}\r\n                      onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                    ></input>\r\n                  </form>\r\n                  <Icon\r\n                    className=\"fa fa-plus-square\"\r\n                    onClick={() => submitFolder()}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <div>\r\n                {folders.map((folder) => (\r\n                  <li key={folder.id}>\r\n                    <button\r\n                      className=\"folders-btn\"\r\n                      onClick={() => addFolderWrapper(folder)}\r\n                    >\r\n                      {folder.name}\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </div>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        <hr />\r\n        <div className=\"date-selection-show\">\r\n          <div className=\"addtodo-calendar-icon\">\r\n            <Icon\r\n              className=\"fa fa-calendar\"\r\n              onClick={() => setCalendarActive(!calendarActive)}\r\n            />\r\n            {value === null ? \"No date selected\" : value.toDateString()}\r\n          </div>\r\n        </div>\r\n        <div className=\"calendar-container\">\r\n          <nav\r\n            ref={calendarRef}\r\n            className={`menu ${calendarActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <Calendar value={null} locale={\"en-EN\"} onChange={onChange} />\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\"; // import { Link } from \"react-router-dom\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LeftNav = ({ navSize, handleNavSizeChange, closeNav }) => {\r\n  let history = useHistory();\r\n  let wrapperFunction = () => {\r\n    closeNav();\r\n    history.push(\"/add\");\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"left-sidebar\" style={{ width: navSize }}>\r\n        <nav className=\"navbar\">\r\n          <NavLink\r\n            exact\r\n            to={\"/\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon className=\"fa fa-home\" />\r\n            Tasks\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/folders\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon className=\"fa fa-folder-open\" />\r\n            Folders\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/settings\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon className=\"fa fa-cog\" />\r\n            Settings\r\n          </NavLink>\r\n        </nav>\r\n      </div>\r\n      <div className=\"burger-btn\">\r\n        <Icon className=\"fa fa-bars\" onClick={() => handleNavSizeChange()} />\r\n      </div>\r\n      <div className=\"add-btn\">\r\n        <Icon className=\"fa fa-plus-square\" onClick={() => wrapperFunction()} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftNav;\r\n","import React from \"react\";\r\n\r\nconst Layout = (props) => (\r\n  <div className={props.navSize === \"100%\" ? \"blur\" : \"\"}>{props.children}</div>\r\n);\r\n\r\nexport default Layout;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst TaskViewEdit = ({\r\n  folders,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n  toggleMode,\r\n  handleDelete,\r\n  redirect,\r\n}) => {\r\n  // date conversion to sql\r\n  let tzoffset = (v) => {\r\n    let offSet = v.getTimezoneOffset() / 60;\r\n    if (offSet < 0) {\r\n      offSet = offSet - offSet * 2;\r\n    }\r\n    v.setHours(offSet);\r\n    v = v.toISOString().split(\"T\")[0];\r\n    return v;\r\n  };\r\n  // title\r\n  const [currInput, setCurrInput] = useState(selectedTask.title);\r\n\r\n  // description\r\n  const [dCurrInput, setDCurrInput] = useState(selectedTask.description);\r\n\r\n  // calendar\r\n  const [calendarValue, setCalendarValue] = useState(\r\n    selectedTask.deadline === null ? null : new Date(selectedTask.deadline)\r\n  );\r\n\r\n  //folder\r\n  const [taskFolderId, setTaskFolderId] = useState(selectedTask.folder_id);\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n  // dropdown\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [calendarActive, setCalendarActive] = useState(false);\r\n  // handle clicks when clicked outside select folder\r\n  const closeFolder = useRef(null);\r\n  const calendarRef = useRef(null);\r\n  const dropdownRef = useRef(null);\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolder.current.contains(e.target)) {\r\n        if (isActive) {\r\n          setIsActive(!isActive);\r\n        }\r\n        if (calendarActive) {\r\n          setCalendarActive(!calendarActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [isActive, calendarActive]);\r\n\r\n  // wrapper function for closing dropdown\r\n  // creating a folder or selecting existing\r\n  const addFolderWrapper = (folder) => {\r\n    isNaN(folder.id) ? submitFolder() : setTaskFolderId(folder.id);\r\n    setIsActive(false);\r\n  };\r\n  const folderWrapper = () => {\r\n    if (calendarActive) {\r\n      setCalendarActive(!calendarActive);\r\n    }\r\n    setIsActive(!isActive);\r\n  };\r\n  const handleSubmit = () => {\r\n    // prevent reload?\r\n    //e.preventDefault();\r\n\r\n    // edit task and post it\r\n    const editedTask = { ...selectedTask };\r\n    editedTask.id = selectedTask.id;\r\n    editedTask.title = currInput;\r\n    editedTask.description = dCurrInput;\r\n    editedTask.deadline =\r\n      calendarValue === null ? null : tzoffset(calendarValue);\r\n    editedTask.folder_id = taskFolderId;\r\n    setSelectedTask(editedTask);\r\n    postTaskHandler(editedTask);\r\n\r\n    // set input to empty when submitting -is this needed? works without\r\n    setCurrInput(\"\");\r\n    //setDCurrInput(\"\");\r\n    toggleMode();\r\n    // redirect to homepage after submit\r\n    // history.push(\"/\");\r\n  };\r\n\r\n  // handles folder creation & post\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  const renderFolder = (id) => {\r\n    if (folders.length === 0) return null;\r\n    return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n  };\r\n  const wrapper = () => {\r\n    handleSubmit();\r\n    toggleMode();\r\n  };\r\n  const deleteWrapper = () => {\r\n    handleDelete(selectedTask.id);\r\n    redirect();\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"edit-container\">\r\n        <div className=\"icons\">\r\n          <Icon className=\"fa fa-trash\" onClick={() => deleteWrapper()} />\r\n          <Icon className=\"fa fa-save\" onClick={() => wrapper()} />\r\n        </div>\r\n        <hr />\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Task title\"\r\n            value={currInput}\r\n            onChange={(e) => setCurrInput(e.target.value)}\r\n          />\r\n        </form>\r\n        <hr />\r\n        <form>\r\n          <div className=\"description-box\">\r\n            <textarea\r\n              type=\"text\"\r\n              placeholder=\"Task description (optional)\"\r\n              value={dCurrInput}\r\n              onChange={(e) => setDCurrInput(e.target.value)}\r\n            />\r\n          </div>\r\n        </form>\r\n        <br />\r\n        <div className=\"dropdown-menu-container\" ref={closeFolder}>\r\n          <div className=\"edit-folder-icon\">\r\n            <Icon\r\n              className=\"fa fa-folder-open\"\r\n              onClick={() => folderWrapper()}\r\n            />\r\n            {taskFolderId == null\r\n              ? \"No folder selected\"\r\n              : renderFolder(taskFolderId)}\r\n          </div>\r\n\r\n          <br />\r\n          <div className=\"folders\">\r\n            <nav\r\n              ref={dropdownRef}\r\n              className={`menu ${isActive ? \"active\" : \"inactive\"}`}\r\n            >\r\n              <ul>\r\n                <li>\r\n                  <p>Create folder</p>\r\n                  <div className=\"folder-title-and-icon\">\r\n                    <form onSubmit={handleSubmit}>\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Folder title\"\r\n                        value={folderCurrInput}\r\n                        onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                      ></input>\r\n                    </form>\r\n                    <Icon\r\n                      className=\"fa fa-plus-square\"\r\n                      onClick={() => addFolderWrapper()}\r\n                    />\r\n                  </div>\r\n                </li>\r\n                <div>\r\n                  {folders.map((folder) => (\r\n                    <li key={folder.id}>\r\n                      <button\r\n                        className=\"folders-btn\"\r\n                        onClick={() => addFolderWrapper(folder)}\r\n                      >\r\n                        {folder.name}\r\n                      </button>\r\n                    </li>\r\n                  ))}\r\n                </div>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n          <hr />\r\n\r\n          <div className=\"edit-calendar-icon\">\r\n            <Icon\r\n              className=\"fa fa-calendar\"\r\n              onClick={() => setCalendarActive(!calendarActive)}\r\n            />\r\n            {calendarValue === null && selectedTask.deadline === null\r\n              ? \"No date selected\"\r\n              : calendarValue === null && selectedTask.deadline !== null\r\n              ? new Date(selectedTask.deadline).toDateString()\r\n              : calendarValue.toDateString()}\r\n          </div>\r\n\r\n          <div className=\"calendar-container\">\r\n            <nav\r\n              ref={calendarRef}\r\n              className={`menu ${calendarActive ? \"active\" : \"inactive\"}`}\r\n            >\r\n              <Calendar\r\n                value={calendarValue}\r\n                locale={\"en-EN\"}\r\n                onChange={setCalendarValue}\r\n              />\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskViewEdit;\r\n","import React, { useState } from \"react\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst TaskViewShow = ({\r\n  folders,\r\n  selectedTask,\r\n  toggleMode,\r\n  handleDelete,\r\n  redirect,\r\n}) => {\r\n  const deleteWrapper = () => {\r\n    handleDelete(selectedTask.id);\r\n    redirect();\r\n  };\r\n  const renderFolder = (id) => {\r\n    if (folders.length === 0) return null;\r\n    return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"show-container\">\r\n        <div className=\"icons\">\r\n          <Icon className=\"fa fa-trash\" onClick={() => deleteWrapper()} />\r\n          <Icon className=\"fa fa-edit\" onClick={() => toggleMode()} />\r\n        </div>\r\n        <hr />\r\n        <div className=\"show-title\">\r\n          <h2>{selectedTask.title}</h2>\r\n        </div>\r\n        <hr />\r\n        <div className=\"show-description\">{selectedTask.description}</div>\r\n        <hr />\r\n        <div className=\"icon-and-name\">\r\n          <div className=\"show-folder-icon\">\r\n            <Icon className=\"fa fa-folder-open\" />\r\n\r\n            <div className=\"show-folder\">\r\n              {selectedTask.folder_id === null\r\n                ? \"No folder selected\"\r\n                : renderFolder(selectedTask.folder_id)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"icon-and-name\">\r\n          <div className=\"show-calendar-icon\">\r\n            <Icon className=\"fa fa-calendar\" />\r\n            <div className=\"show-deadline\">\r\n              {\" \"}\r\n              {selectedTask.deadline === null\r\n                ? \"No date selected\"\r\n                : new Date(selectedTask.deadline).toDateString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskViewShow;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TaskViewEdit from \"./TaskViewEdit\";\r\nimport TaskViewShow from \"./TaskViewShow\";\r\n\r\nconst TaskView = ({\r\n  folders,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n  handleDelete,\r\n}) => {\r\n  const history = useHistory();\r\n  const redirect = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const [editMode, setEditMode] = useState(false);\r\n  const toggleMode = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  return !selectedTask ? (\r\n    <> {redirect()}</>\r\n  ) : editMode ? (\r\n    <div className=\"content\">\r\n      <br />\r\n      <TaskViewEdit\r\n        folders={folders}\r\n        selectedTask={selectedTask}\r\n        setSelectedTask={setSelectedTask}\r\n        postTaskHandler={postTaskHandler}\r\n        postFolderHandler={postFolderHandler}\r\n        toggleMode={toggleMode}\r\n        handleDelete={handleDelete}\r\n        redirect={redirect}\r\n      />\r\n    </div>\r\n  ) : (\r\n    <div className=\"content\">\r\n      <br />\r\n      <TaskViewShow\r\n        folders={folders}\r\n        selectedTask={selectedTask}\r\n        toggleMode={toggleMode}\r\n        handleDelete={handleDelete}\r\n        redirect={redirect}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskView;\r\n","import \"./App.scss\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport axios from \"axios\";\r\n\r\n// local components\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport Folders from \"./components/Folders\";\r\nimport Settings from \"./components/Settings\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport LeftNav from \"./components/LeftNav\";\r\nimport Layout from \"./components/Layout\";\r\nimport TaskView from \"./components/TaskView\";\r\n\r\nconst App = () => {\r\n  // simulates tasklist fetched from backend\r\n  let url = \"\";\r\n  const [sortAscending, setSortAscending] = useState(false);\r\n  const [currSort, setCurrSort] = useState(\"timeCreated\"); // default when loading page\r\n\r\n  const useLocalHost = false; // change this to true if u want to use localHost, make sure to start your localhost server then\r\n  useLocalHost\r\n    ? (url = \"http://localhost:8080/api\")\r\n    : (url = \"https://tamk-4a00ez62-3001-group04.herokuapp.com/api\");\r\n\r\n  const [todos, setTodos] = useState([]);\r\n  const [folders, setFolders] = useState([]);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const searchData = (str) => {\r\n    // fetch all in case of null\r\n    str === null ? fetchData() : fetchData(`?search=${str}`);\r\n  };\r\n\r\n  // sort todoArray without changing rules for sorting\r\n  const sortTodos = (tasks, table) => {\r\n    let arr = [...tasks];\r\n\r\n    const sortFunc = (a, b) => {\r\n      if (a[table] > b[table]) {\r\n        return 1;\r\n      } else if (a[table] < b[table]) {\r\n        return -1;\r\n      } else if (a[table] === null) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    };\r\n    sortAscending\r\n      ? arr.sort((a, b) => sortFunc(a, b))\r\n      : arr.sort((b, a) => sortFunc(a, b));\r\n\r\n    return arr;\r\n  };\r\n\r\n  // used to trigger sort and change direction of sorting, also saves new save rule for table\r\n  const sortTodosHandler = (table) => {\r\n    if (table !== currSort) {\r\n      setCurrSort(table);\r\n    }\r\n    setTodos(sortTodos(todos, table));\r\n  };\r\n\r\n  const fetchData = (search) => {\r\n    const fetchTable = async (table, query = \"\") => {\r\n      const response = await axios.get(url + \"/\" + table + query);\r\n      //console.log(response.data);\r\n      return response.data;\r\n    };\r\n\r\n    Promise.all([fetchTable(\"tasks\", search), fetchTable(\"folders\")])\r\n      .then((data) => {\r\n        const temp = sortTodos(data[0], currSort);\r\n        setTodos(temp);\r\n        setFolders(data[1]);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  const postTaskHandler = async (task) => {\r\n    try {\r\n      if (task.id !== undefined) {\r\n        await axios.post(url + `/tasks/${task.id}`, {\r\n          ...task,\r\n        });\r\n      } else {\r\n        await axios.post(url + \"/tasks\", {\r\n          ...task,\r\n        });\r\n      }\r\n      fetchData(); // Fetch tasks again after a successful post request\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const postFolderHandler = async (folder) => {\r\n    try {\r\n      await axios.post(url + `/folders`, { ...folder });\r\n      fetchData();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    const res = await axios.delete(url + \"/tasks/\" + id);\r\n    // 204 = ok no content\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const handleFolderDelete = async (id) => {\r\n    const res = await axios.delete(url + \"/folders/\" + id);\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const deleteAllTasks = async () => {\r\n    const res = await axios.delete(url + \"/tasks/\");\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n\r\n  const deleteAllFolders = async () => {\r\n    const res = await axios.delete(url + \"/folders/\");\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const [navSize, setNavSize] = useState(\"0px\");\r\n  let smallScreen = useMediaQuery({ query: \"(max-width: 900px)\" });\r\n  const CloseNav = () => {\r\n    if (smallScreen) {\r\n      setNavSize(\"0px\");\r\n    }\r\n  };\r\n  const HandleNavSizeChange = () => {\r\n    smallScreen\r\n      ? setNavSize(navSize === \"100%\" ? \"0%\" : \"100%\")\r\n      : setNavSize(navSize === \"200px\" ? \"0px\" : \"200px\");\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Header searchData={searchData} />\r\n      <LeftNav\r\n        navSize={navSize}\r\n        handleNavSizeChange={HandleNavSizeChange}\r\n        closeNav={CloseNav}\r\n      />\r\n      <Layout navSize={navSize}>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home\r\n              todos={todos}\r\n              folders={folders}\r\n              handleDelete={handleDelete}\r\n              closeNav={CloseNav}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              setSelectedTask={setSelectedTask}\r\n              sortTodosHandler={sortTodosHandler}\r\n              searchData={searchData}\r\n              sortAscending={sortAscending}\r\n              setSortAscending={setSortAscending}\r\n              currSort={currSort}\r\n            />\r\n          </Route>\r\n\r\n          <Route exact path=\"/folders\">\r\n            <Folders\r\n              todos={todos}\r\n              folders={folders}\r\n              handleDelete={handleDelete}\r\n              closeNav={CloseNav}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              setSelectedTask={setSelectedTask}\r\n              sortTodosHandler={sortTodosHandler}\r\n              handleFolderDelete={handleFolderDelete}\r\n              postFolderHandler={postFolderHandler}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/settings\">\r\n            <Settings\r\n              deleteAllTasks={deleteAllTasks}\r\n              deleteAllFolders={deleteAllFolders}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/add\">\r\n            <AddTodo\r\n              todos={todos}\r\n              folders={folders}\r\n              setTodos={setTodos}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              postFolderHandler={postFolderHandler}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/task\">\r\n            <TaskView\r\n              folders={folders}\r\n              selectedTask={selectedTask}\r\n              setSelectedTask={setSelectedTask}\r\n              postTaskHandler={postTaskHandler}\r\n              postFolderHandler={postFolderHandler}\r\n              todos={todos}\r\n              handleDelete={handleDelete}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}